{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "35413e37-bc0a-476d-ba79-8de35edcaf93",
   "metadata": {},
   "source": [
    "# Agenda\n",
    "- What is Regression\n",
    "- Types of Regression\n",
    "  - Linear Regression\n",
    "    - Simple Linear Regression\n",
    "      - Train Test Split\n",
    "    - Multiple Linear Regression\n",
    "      - Overfitting and Underfitting\n",
    "      - Bias and Variance Trade off\n",
    "  - Non Linear Regression\n",
    "    - Polynomial Regression\n",
    "- Model Evaulation and Validation\n",
    "  - Cross Validation Techniques\n",
    "  - Performance Metrics in Regression\n",
    "    - Mean Square Error (MSE)\n",
    "    - Mean Absolute Error (MAE)\n",
    "    - Root Mean Squared Error (RMSE)\n",
    "    - R- Squared\n",
    "- Regularization Techinques\n",
    "  - Lasso Regression\n",
    "  - Ridge Regressio\n",
    "\n",
    "- Hyperparameter Tuning\n",
    "  - GridSearch\n",
    "  - RandomSearch\n",
    "- Pipelines\n",
    "  - scikitlearn pipelines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e9a8343-d8a6-407a-9a04-af578f11c3b5",
   "metadata": {},
   "source": [
    "## What is Regression\n",
    "Regression is a type of Supevised Learning and Statistical Method used to model and analyze the relationship between dependent variable(target/ output) and one or more independent variable( features/input) . The goal of regression to predict a continuous value for a given set of Inputs\n",
    "\n",
    "\n",
    "## Types of Regression\n",
    "There are two types for Linear Regression\n",
    "- Simple Linear Regression\n",
    "- Multiple Linear Regression\n",
    "\n",
    "### Simple Linear Regression\n",
    "Simple Linear Regression models the relationship between one indepenedent Variable and dependent variable as a straight line: which can be represented as \n",
    "$$ y = mx + c $$\n",
    "\n",
    "\n",
    "# __Date: 02-07-2025__\n",
    "\n",
    "In Other words, The Equation of line that is used to predict the values for the independent variable is represented as :\n",
    "$$ \\hat{y}= \\beta_0 + \\beta_1 x $$\n",
    "Where:\n",
    "- $\\hat{y}$ is the predicted value of the dependent variable\n",
    "- x is the independent variable\n",
    "- $\\beta_0$ is the intercept \n",
    "- $\\beta_1$ is the slope with respest to variable `x`\n",
    "\n",
    "![link text](https://labcontent.simplicdn.net/data-content/content-assets/Data_and_AI/ML/Lesson04_Regression/updates/Simple_linear_regression.jpg)\n",
    "\n",
    "\n",
    "### Multiple Linear Regression\n",
    "Multiple Linear Regression models the relationship between Two or more indepenedent Variable/features and dependent variable as a straight line: The Equation for multiple linear regression is represented as \n",
    "$$ \\hat{y} =  \\beta_0 + \\beta_1 x_1 +  \\beta_2 x_2 +....+ \\beta_n x_n  $$\n",
    "\n",
    "$$ \\hat{y} =  \\beta_0 + \\sum_{i=1}^n\\beta_i x_i $$\n",
    "\n",
    "where :\n",
    "- $x_1, x_2, ... ,x_n$ are the predictor variables/features\n",
    "- $\\beta_1,\\beta_2...., \\beta_n$  are the coefficient of each predictor(slope of each variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0eb12d29-1dba-4b30-8ecd-f674ea0847cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Let us see how to fit a simple linear regression on dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e5291e8-619c-4040-8421-04b534b76457",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b36e7787-3059-41f3-8080-3784805fb88b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230.1</td>\n",
       "      <td>22.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44.5</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.2</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>151.5</td>\n",
       "      <td>18.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>180.8</td>\n",
       "      <td>12.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      TV  Sales\n",
       "0  230.1   22.1\n",
       "1   44.5   10.4\n",
       "2   17.2    9.3\n",
       "3  151.5   18.5\n",
       "4  180.8   12.9"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read the dataset\n",
    "df = pd.read_csv('tvmarketing.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a1f7e2dd-dd55-47a9-946a-246cbc13c285",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 200 entries, 0 to 199\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   TV      200 non-null    float64\n",
      " 1   Sales   200 non-null    float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 3.3 KB\n"
     ]
    }
   ],
   "source": [
    "# general summary\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1892cbef-aac7-4f86-a89a-cba037c3a3be",
   "metadata": {},
   "source": [
    "There are no missing values in he dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02498c96-a965-47f9-aef2-54b1ea4f7245",
   "metadata": {},
   "source": [
    "## Train Test Split\n",
    "It a fundamental technique in ML used to evaluate model performance. It involves dividing data set into 2 parts\n",
    "- Training set -  use to train the model\n",
    "- Testing set - Used to test how well the model generalizes to unseen data\n",
    "\n",
    "## Split Ratios\n",
    "- Train -80% and Test -20%  : General Practice\n",
    "- Train -70% and Test -30%  : Use when more data is available\n",
    "- Train -60% and Test -40%  : Very large datasets\n",
    "- Train -90% and Test -10%  : when test isn't critical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8e0839ce-3d90-4477-8864-25551cd759af",
   "metadata": {},
   "outputs": [],
   "source": [
    "## perform train test split on the dataset\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2c18d4b8-2380-4539-a622-c017438838c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Segregate Input Features and Target variable\n",
    "X = df.iloc[:, :-1]\n",
    "y = df.iloc[:, -1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fa019a17-eb91-4d19-a655-00fe72c7c42f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index([ 79, 197,  38,  24, 122, 195,  29,  19, 143,  86,\n",
      "       ...\n",
      "       121, 199,  20, 188,  71, 106,  14,  92, 179, 102],\n",
      "      dtype='int64', length=160)\n",
      "(160, 1)\n",
      "(40, 1)\n",
      "(160,)\n",
      "(40,)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,random_state = 42)\n",
    "print(X_train.index)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ce0eec63-2f5e-41aa-aa84-e390ba1a4b97",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Let us train(fit) the model\n",
    "### Import LinearRegression from scikitlearn\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7084f441-14ac-4e77-96b7-e30028509e2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label  sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></div></label><div class=\"sk-toggleable__content \"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create an instance of LinearRegression Class\n",
    "lin_reg  = LinearRegression()\n",
    "lin_reg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "683d0531-db56-4533-b301-00d2d8b0beee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## train the model\n",
    "lin_reg.fit(X_train, y_train)\n",
    "# at this step the model learns the relationship between the input and output and finds the trained \n",
    "# parameters (Coefficeint of Regresion and the intercept)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e34851ba-c81c-400d-b702-db5c00e2f2ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Coefficient of Regression is : [0.04652973]\n",
      "The Intercept is : 7.1196384305929525\n"
     ]
    }
   ],
   "source": [
    "print(f'The Coefficient of Regression is : {lin_reg.coef_}')\n",
    "print(f'The Intercept is : {lin_reg.intercept_}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3e8968b0-ed4a-4e97-9691-92b02becbed6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Equation of Prediction Line is 7.1196384305929525 + 0.04652973370544335 * TV\n"
     ]
    }
   ],
   "source": [
    "print(f'The Equation of Prediction Line is {lin_reg.intercept_} + {lin_reg.coef_[0]} * TV')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fa64a6f9-4c98-41ba-bf59-03ac36e157a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Predict on the test set\n",
    "y_test_predicted = lin_reg.predict(X_test) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d36aabde-6481-4cbc-b39d-cd54433440e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14.71794394 16.2115484  20.74819743  7.66403631 17.37013877]\n",
      "[16.9 22.4 21.4  7.3 24.7]\n"
     ]
    }
   ],
   "source": [
    "print(y_test_predicted[:5])\n",
    "print(y_test.values[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "48d77c2e-f2b4-4541-be49-56ef82c13375",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Visualize the results for test dataset\n",
    "\n",
    "plt.scatter(X_test,y_test, label = 'Actuals')\n",
    "plt.plot(X_test, y_test_predicted, color = 'red', label = 'Predicted', marker =  '*',\n",
    "         mfc = 'green', ms =8, mec='green', alpha = 0.6)\n",
    "plt.legend(loc ='upper left')\n",
    "plt.title('Linear Regression Model(Test Data)')\n",
    "plt.xlabel('TV')\n",
    "plt.ylabel('Sales')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85d0fa9a-556c-4360-8785-d5f203c3e813",
   "metadata": {},
   "source": [
    "## Overfitting and Underfitting\n",
    "When developing ML models, Achieving the right balance between model complexity and simplilicity is crucial. This balance is covered by the concepts of overfitting and underfitting\n",
    "\n",
    "### Overfitting\n",
    "- Overfitting Occurs when a model learns the noise and details too well to an extent that it negatvely impacts its performance on unseen data\n",
    "- Sign: High Accuracy on training data but poor on test data\n",
    "- Cause: Model is too complex(too many parameters)\n",
    "\n",
    "### Underfitting\n",
    "- Underfitting happens when a model is too simple to capture the underlying pattern of the data\n",
    "- Sign: Poor Accuracy on training data &  test data\n",
    "- Cause: Model is too simple(too few parameters)\n",
    "\n",
    "### Bias and Variance Tradeoff\n",
    "- Bias : Errors due to overly simplistics assumptions in the learning algorithm. High bias can cause underfitting\n",
    "- Variance : Error due to excessive complexity in the learning algorithm.High Bias can cause overfitting\n",
    "\n",
    "**Tradeoff**\n",
    "- Low Bias and High Variance : Models fits the training data well but fails to generalize(overfitting)\n",
    "- High Bias and Low Variance : Models does not fit the training data well and misses the underlying trend(undefitting)\n",
    "- Optimal Tradeoff:  Finding the balance where the model performs well on both training and testing data minimizing overall error.\n",
    "\n",
    "\n",
    "![link_text](https://scott.fortmann-roe.com/docs/docs/BiasVariance/biasvariance.png)\n",
    "\n",
    "** Image Courtesy: scott.fortmann-roe.com **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cd324d28-fcba-431e-b8f5-fad420785d29",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Lets look how to check for ovrfitting and underfitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "00c2e746-aecd-42eb-b94d-b633b3377d7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error, r2_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "68e8a2e9-da23-484e-b358-4e752951ea7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train MSE : 10.6036\n",
      "Test MSE : 10.2047\n",
      "Train R2 : 0.5912\n",
      "Test R2 : 0.6767\n"
     ]
    }
   ],
   "source": [
    "y_train_predicted =  lin_reg.predict(X_train)\n",
    "y_test_predicted =  lin_reg.predict(X_test)\n",
    "\n",
    "\n",
    "mse_train =  mean_squared_error(y_train, y_train_predicted)\n",
    "mse_test = mean_squared_error(y_test, y_test_predicted)\n",
    "r2_train = r2_score(y_train, y_train_predicted)\n",
    "r2_test = r2_score(y_test, y_test_predicted)\n",
    "\n",
    "\n",
    "print(f'Train MSE : {mse_train:.4f}')\n",
    "print(f'Test MSE : {mse_test:.4f}')\n",
    "print(f'Train R2 : {r2_train:.4f}')\n",
    "print(f'Test R2 : {r2_test:.4f}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00ca7e51-0e22-4712-8c07-5298f87288d5",
   "metadata": {},
   "source": [
    "# __Date: 03-07-2025__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d906953b-a297-4afd-9d4b-87f5c00aa485",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model may be underfitting, Consider increasing model complexity\n"
     ]
    }
   ],
   "source": [
    "# Check for overfitting and underfitting:\n",
    "\n",
    "if mse_train < mse_test or r2_train > r2_test:\n",
    "    if abs(r2_train - r2_test) > 0.1:\n",
    "        print('Model may be overfitting to the training data')\n",
    "    else:\n",
    "        print('Model Performs reasonably well, but check slight overfitting')\n",
    "elif mse_train > mse_test and r2_train < r2_test:\n",
    "    print('Model may be underfitting, Consider increasing model complexity')\n",
    "else:\n",
    "    print(' Model has balanced fit on both training and testing data') "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3188f829-95a8-4407-b3c2-7f34a4342c21",
   "metadata": {},
   "source": [
    "Mean Squared Error (MSE) and R-squared (R²) values are calculated for both training and test datasets.\n",
    " - MSE measures the average of the squares of the errors, that is, the average squared difference between the estimated values and the actual value.\n",
    " - R² provides an indication of goodness of fit and therefore a measure of how well unseen samples are likely to be predicted by the model\n",
    " - Overfitting: The model performs well on the training data but poorly on the test data (higher R² on training or lower MSE on training compared to testing).\n",
    " - Underfitting: The model performs poorly on both training and test data, or better on the test data compared to the training data, which could suggest that the model is too simple."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d016596-6013-44da-877f-c60082b8b130",
   "metadata": {},
   "source": [
    "# Non Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b390a02a-ae54-4518-9f94-023c6ba36ce2",
   "metadata": {},
   "source": [
    "## Polynomial Regression\n",
    "Polynomial Regression is a subset of Linear Regression that includes Polynomial terms. The relationship between independent variable(X) and dependent variable (y) is modeled as $n_{th}$ degree polynomial\n",
    "- It is special case of multiple linear regression. some polynomial terms are added to the multiple linear regression  equation to convert into polynomial regression."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8088af72-25fc-483f-a1fb-1629d07c8569",
   "metadata": {},
   "source": [
    "## Steps \n",
    "- After Importing Libraries: assign the polynomial features of upto degree 5 to a variable poly_features\n",
    "- Fit and transform values of X_train and X_test for polynomial Terms\n",
    "- apply linear regression on new data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "16aa23ff-b7f6-421b-bbf8-6238ddf4ffa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9e3724d1-fffd-4516-bbdc-d2c712d3bca2",
   "metadata": {},
   "outputs": [],
   "source": [
    "poly_features = PolynomialFeatures(degree =5)\n",
    "poly_features.fit(X_train)\n",
    "X_train_poly =  poly_features.transform(X_train)\n",
    "X_test_poly =  poly_features.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "25ec8b3b-7dd9-4e6d-842a-a6144fd98733",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>163.3</td>\n",
       "      <td>26666.89</td>\n",
       "      <td>4.354703e+06</td>\n",
       "      <td>7.111230e+08</td>\n",
       "      <td>1.161264e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>195.4</td>\n",
       "      <td>38181.16</td>\n",
       "      <td>7.460599e+06</td>\n",
       "      <td>1.457801e+09</td>\n",
       "      <td>2.848543e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>292.9</td>\n",
       "      <td>85790.41</td>\n",
       "      <td>2.512801e+07</td>\n",
       "      <td>7.359994e+09</td>\n",
       "      <td>2.155742e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>11.7</td>\n",
       "      <td>136.89</td>\n",
       "      <td>1.601613e+03</td>\n",
       "      <td>1.873887e+04</td>\n",
       "      <td>2.192448e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>220.3</td>\n",
       "      <td>48532.09</td>\n",
       "      <td>1.069162e+07</td>\n",
       "      <td>2.355364e+09</td>\n",
       "      <td>5.188866e+11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     0      1         2             3             4             5\n",
       "0  1.0  163.3  26666.89  4.354703e+06  7.111230e+08  1.161264e+11\n",
       "1  1.0  195.4  38181.16  7.460599e+06  1.457801e+09  2.848543e+11\n",
       "2  1.0  292.9  85790.41  2.512801e+07  7.359994e+09  2.155742e+12\n",
       "3  1.0   11.7    136.89  1.601613e+03  1.873887e+04  2.192448e+05\n",
       "4  1.0  220.3  48532.09  1.069162e+07  2.355364e+09  5.188866e+11"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(X_test_poly[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7730e444-14df-4ff1-b072-638add2a1654",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lin_reg_poly = LinearRegression()\n",
    "lin_reg_poly.fit(X_train_poly,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ca09cd1a-718d-47bd-94fd-abeb496c7f39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients of Regression [ 0.00000000e+00  2.80560519e-01 -4.16466213e-03  3.27228357e-05\n",
      " -1.16885598e-07  1.53706995e-10]\n",
      "Intercept is  3.2031450517643645\n"
     ]
    }
   ],
   "source": [
    "print(f'Coefficients of Regression {lin_reg_poly.coef_}')\n",
    "print(f'Intercept is  {lin_reg_poly.intercept_}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9116e209-753c-418a-98ac-ce68bd2a6cb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Do Predictions\n",
    "y_train_pred_poly= lin_reg_poly.predict(X_train_poly)\n",
    "y_test_pred_poly= lin_reg_poly.predict(X_test_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2a34fc8d-09de-4fba-8fe8-5f9cf4a42508",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train MSE : 10.0658\n",
      "Test MSE : 10.2051\n",
      "Train R2 : 0.6119\n",
      "Test R2 : 0.6767\n"
     ]
    }
   ],
   "source": [
    "mse_train =  mean_squared_error(y_train, y_train_pred_poly)\n",
    "mse_test = mean_squared_error(y_test, y_test_pred_poly)\n",
    "r2_train = r2_score(y_train, y_train_pred_poly)\n",
    "r2_test = r2_score(y_test, y_test_pred_poly)\n",
    "\n",
    "\n",
    "print(f'Train MSE : {mse_train:.4f}')\n",
    "print(f'Test MSE : {mse_test:.4f}')\n",
    "print(f'Train R2 : {r2_train:.4f}')\n",
    "print(f'Test R2 : {r2_test:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3bfa1a5a-9234-431d-bc0a-47c3b8e75783",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Performs reasonably well, but check slight overfitting\n"
     ]
    }
   ],
   "source": [
    "\n",
    "if mse_train < mse_test or r2_train > r2_test:\n",
    "    if abs(r2_train - r2_test) > 0.1:\n",
    "        print('Model may be overfitting to the training data')\n",
    "    else:\n",
    "        print('Model Performs reasonably well, but check slight overfitting')\n",
    "elif mse_train > mse_test and r2_train < r2_test:\n",
    "    print('Model may be underfitting, Consider increasing model complexity')\n",
    "else:\n",
    "    print(' Model has balanced fit on both training and testing data') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a4104c4b-0d57-4de1-9895-fe133a77170a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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+/bl888/59prryU4OJirr76azz//HDA/s1dffTUVKlSgTZs2OabYOCu7X7JkCT169CAyMtJ+vCeffDLHvylnVq1axfHjx7njjjvy3Der3P6N53c8zt6L7fzExMTQsmVLgoODadq0KXPnzi3Q+LLz9/fnrbfeonr16rz44ov27ampqTz66KO0aNGCsLAwqlatSrt27Vi5cqXD8y0WCykpKXz44Yf26QK2q5N//fUXDz74IFFRUVSsWJHw8HC6devGli1bcoyjRo0adO/enXfffbdI70dE3Etxn+I+xX3OKe5T3Adw6dIlnn32WZo2bUpgYCBXXHEFd911F3/99ZfDfuvXr6dLly5Uq1aN4OBg6taty6233sr58+c5fPiwPbE9ffp0ezw1atSoAo3FJjg4mA8++ICAgACH2C4/cVleYzl06BB33XUXTZo0ISQkhFq1atGvXz9++umnHOO47rrruPrqqxXbuaDEWRl26623cuWVV/LZZ5/x5JNPsmjRIiZOnOiwz/3338+ECRO46aabWLFiBe+88w779u2jffv2DsHLr7/+Srt27ZgzZw5fffUVU6dO5fvvv6djx45O/xAOGjSIxo0b8+mnnxbqH2d8fDxglpXa7N+/n9atW7N3715efvllPv/8c/r06cNDDz3kcHUyISGBzp07c+DAAebMmcNHH33E2bNnGTdunNPXSkhIYMSIEQwfPpwvvviCBx98kPPnz9O5c2c+/PBDHnroIdauXcukSZOYP38+/fv3t/eEiI2NZciQITRs2JCPP/6YNWvWMHXqVNLS0uzHnz17Nk8//TTDhg1jzZo1LFmyhNGjR+f4g5XdzJkzGT16NP/3f//HsmXLeP3119mzZw/t2rXj4MGDDvtevnyZ/v37c+ONN7Jy5UruvvtuXn31VWbNmpXvcz506FD8/f1ZvHixfdsHH3zA4MGDqVSpUo79N23aRLdu3UhKSuKDDz5g8eLFhIaG0q9fP4dS9f3793PjjTdy5swZ5s+fz7vvvsvu3bt59tlncxzz+eefZ9iwYURFRfHJJ5/w3//+l7Nnz3LDDTewf//+fL8XgBEjRlC+fPkc/TnS09NZsGAB/fr1o3r16qSkpNC9e3f+/PNP3n77bb7++mtee+016taty9mzZwv0mja2oO2KK67gr7/+on379nz11Vc888wzrFq1iptuuonHHnvM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